!function(){"use strict";var t=[" _____   _       _______","(____ \\ | |     (_______)"," _   \\ \\| |      _____","| |   | | |     |  ___)","| |__/ /| |_____| |","|_____/ |_______)_|"].join("\n");console.log(t)}(),function(){var t=L.tileLayer("http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png",{attribution:'&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> &copy; <a href="http://cartodb.com/attributions">CartoDB</a>',subdomains:"abcd",maxZoom:19}),e=L.tileLayer("https://{s}.tile.thunderforest.com/landscape/{z}/{x}/{y}.png?apikey=ed8a8c98442949588501489e7f836831",{attribution:'&copy; <a href="http://www.thunderforest.com/">Thunderforest</a>, &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'}),o=L.map("map",{zoom:4,layers:[t,e]}),a={Landscape:e,Positron:t};L.control.layers(a).addTo(o);var r=L.markerClusterGroup(),n=new OverlappingMarkerSpiderfier(o),_=new L.Popup;n.addListener("click",function(t){_.setContent(t.desc),_.setLatLng(t.getLatLng()),o.openPopup(_)}),n.addListener("spiderfy",function(t){o.closePopup()});var p=L.geoJson(events,{onEachFeature:function(t,e){var o="";t.properties&&t.properties.popupContent&&(o+=t.properties.popupContent),e.bindPopup(o)},pointToLayer:function(t,e){return L.marker(e)}});r.addLayer(p),o.addLayer(r),o.fitBounds(r.getBounds())}(),function(){"use strict";$.ajax({url:"/data/events_table.json",success:function(t){$("#event_table").dynatable({dataset:{records:t,sorts:{date:1}}})}})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5taW4uanMiXSwibmFtZXMiOlsiZGxmIiwiam9pbiIsImNvbnNvbGUiLCJsb2ciLCJDYXJ0b0RCX1Bvc2l0cm9uIiwiTCIsInRpbGVMYXllciIsImF0dHJpYnV0aW9uIiwic3ViZG9tYWlucyIsIm1heFpvb20iLCJUaHVuZGVyZm9yZXN0X0xhbmRzY2FwZSIsIm1hcCIsInpvb20iLCJsYXllcnMiLCJiYXNlTWFwcyIsIkxhbmRzY2FwZSIsIlBvc2l0cm9uIiwiY29udHJvbCIsImFkZFRvIiwibWFya2VycyIsIm1hcmtlckNsdXN0ZXJHcm91cCIsIm9tcyIsIk92ZXJsYXBwaW5nTWFya2VyU3BpZGVyZmllciIsInBvcHVwIiwiUG9wdXAiLCJhZGRMaXN0ZW5lciIsIm1hcmtlciIsInNldENvbnRlbnQiLCJkZXNjIiwic2V0TGF0TG5nIiwiZ2V0TGF0TG5nIiwib3BlblBvcHVwIiwiY2xvc2VQb3B1cCIsImdlb0pzb25MYXllciIsImdlb0pzb24iLCJldmVudHMiLCJvbkVhY2hGZWF0dXJlIiwiZmVhdHVyZSIsImxheWVyIiwicG9wdXBDb250ZW50IiwicHJvcGVydGllcyIsImJpbmRQb3B1cCIsInBvaW50VG9MYXllciIsImxhdGxuZyIsImFkZExheWVyIiwiZml0Qm91bmRzIiwiZ2V0Qm91bmRzIiwiJCIsImFqYXgiLCJ1cmwiLCJzdWNjZXNzIiwiZGF0YSIsImR5bmF0YWJsZSIsImRhdGFzZXQiLCJyZWNvcmRzIiwic29ydHMiLCJkYXRlIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUNFLGFBRUEsSUFBSUEsR0FDRiwyQkFDQSw2QkFDQSwyQkFDQSwwQkFDQSxzQkFDQSx1QkFDQUMsS0FBSyxNQUVQQyxRQUFRQyxJQUFJSCxHQVpkLEdBZUEsV0FHSSxJQUFJSSxFQUFtQkMsRUFBRUMsVUFBVSw4REFDM0JDLFlBQWEseUlBQ2JDLFdBQVksT0FDWkMsUUFBUyxLQUViQyxFQUEwQkwsRUFBRUMsVUFBVSx3R0FDbENDLFlBQWEsZ0pBR2pCSSxFQUFNTixFQUFFTSxJQUFJLE9BRVpDLEtBQU0sRUFDTkMsUUFBU1QsRUFBa0JNLEtBRzNCSSxHQUNBQyxVQUFhTCxFQUNiTSxTQUFZWixHQUdoQkMsRUFBRVksUUFBUUosT0FBT0MsR0FBVUksTUFBTVAsR0FZakMsSUFBSVEsRUFBVWQsRUFBRWUscUJBQ1pDLEVBQU0sSUFBSUMsNEJBQTRCWCxHQUV0Q1ksRUFBUSxJQUFJbEIsRUFBRW1CLE1BRWxCSCxFQUFJSSxZQUFZLFFBQVMsU0FBU0MsR0FDOUJILEVBQU1JLFdBQVdELEVBQU9FLE1BQ3hCTCxFQUFNTSxVQUFVSCxFQUFPSSxhQUN2Qm5CLEVBQUlvQixVQUFVUixLQUdsQkYsRUFBSUksWUFBWSxXQUFZLFNBQVNOLEdBQzdCUixFQUFJcUIsZUFHWixJQUFJQyxFQUFlNUIsRUFBRTZCLFFBQVFDLFFBQ3pCQyxjQTFCSixTQUF1QkMsRUFBU0MsR0FDNUIsSUFBSUMsRUFBZSxHQUNmRixFQUFRRyxZQUFjSCxFQUFRRyxXQUFXRCxlQUN6Q0EsR0FBZ0JGLEVBQVFHLFdBQVdELGNBR3ZDRCxFQUFNRyxVQUFVRixJQXFCaEJHLGFBQWMsU0FBU0wsRUFBU00sR0FDNUIsT0FBT3RDLEVBQUVxQixPQUFPaUIsTUFJeEJ4QixFQUFReUIsU0FBU1gsR0FDakJ0QixFQUFJaUMsU0FBU3pCLEdBQ2JSLEVBQUlrQyxVQUFVMUIsRUFBUTJCLGFBM0QxQixHQStEQSxXQUNJLGFBR0FDLEVBQUVDLE1BQ0VDLElBQUssMEJBQ0xDLFFBQVMsU0FBU0MsR0FDZEosRUFBRSxnQkFBZ0JLLFdBQ2RDLFNBQ0lDLFFBQVNILEVBQ1RJLE9BQVNDLEtBQU0sU0FWbkMiLCJmaWxlIjoic2NyaXB0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGRsZiA9IFtcbiAgICAnIF9fX19fICAgXyAgICAgICBfX19fX19fJyxcbiAgICAnKF9fX18gXFxcXCB8IHwgICAgIChfX19fX19fKScsXG4gICAgJyBfICAgXFxcXCBcXFxcfCB8ICAgICAgX19fX18nLFxuICAgICd8IHwgICB8IHwgfCAgICAgfCAgX19fKScsXG4gICAgJ3wgfF9fLyAvfCB8X19fX198IHwnLFxuICAgICd8X19fX18vIHxfX19fX19fKV98J1xuICBdLmpvaW4oJ1xcbicpO1xuXG4gIGNvbnNvbGUubG9nKGRsZik7XG59KSgpO1xuXG4oZnVuY3Rpb24oKSB7XG4gICAgLy8gJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIENhcnRvREJfUG9zaXRyb24gPSBMLnRpbGVMYXllcignaHR0cDovL3tzfS5iYXNlbWFwcy5jYXJ0b2Nkbi5jb20vbGlnaHRfYWxsL3t6fS97eH0ve3l9LnBuZycsIHtcbiAgICAgICAgICAgIGF0dHJpYnV0aW9uOiAnJmNvcHk7IDxhIGhyZWY9XCJodHRwOi8vd3d3Lm9wZW5zdHJlZXRtYXAub3JnL2NvcHlyaWdodFwiPk9wZW5TdHJlZXRNYXA8L2E+ICZjb3B5OyA8YSBocmVmPVwiaHR0cDovL2NhcnRvZGIuY29tL2F0dHJpYnV0aW9uc1wiPkNhcnRvREI8L2E+JyxcbiAgICAgICAgICAgIHN1YmRvbWFpbnM6ICdhYmNkJyxcbiAgICAgICAgICAgIG1heFpvb206IDE5XG4gICAgICAgIH0pLFxuICAgICAgICBUaHVuZGVyZm9yZXN0X0xhbmRzY2FwZSA9IEwudGlsZUxheWVyKCdodHRwczovL3tzfS50aWxlLnRodW5kZXJmb3Jlc3QuY29tL2xhbmRzY2FwZS97en0ve3h9L3t5fS5wbmc/YXBpa2V5PWVkOGE4Yzk4NDQyOTQ5NTg4NTAxNDg5ZTdmODM2ODMxJywge1xuICAgICAgICAgICAgYXR0cmlidXRpb246ICcmY29weTsgPGEgaHJlZj1cImh0dHA6Ly93d3cudGh1bmRlcmZvcmVzdC5jb20vXCI+VGh1bmRlcmZvcmVzdDwvYT4sICZjb3B5OyA8YSBocmVmPVwiaHR0cDovL3d3dy5vcGVuc3RyZWV0bWFwLm9yZy9jb3B5cmlnaHRcIj5PcGVuU3RyZWV0TWFwPC9hPidcbiAgICAgICAgfSk7XG5cbiAgICB2YXIgbWFwID0gTC5tYXAoJ21hcCcsIHtcbiAgICAgICAgLy8gY2VudGVyOiBbMzkuNzMsIC0xMDQuOTldLFxuICAgICAgICB6b29tOiA0LFxuICAgICAgICBsYXllcnM6IFtDYXJ0b0RCX1Bvc2l0cm9uLCBUaHVuZGVyZm9yZXN0X0xhbmRzY2FwZV1cbiAgICB9KTtcblxuICAgIHZhciBiYXNlTWFwcyA9IHtcbiAgICAgICAgXCJMYW5kc2NhcGVcIjogVGh1bmRlcmZvcmVzdF9MYW5kc2NhcGUsXG4gICAgICAgIFwiUG9zaXRyb25cIjogQ2FydG9EQl9Qb3NpdHJvblxuICAgIH07XG5cbiAgICBMLmNvbnRyb2wubGF5ZXJzKGJhc2VNYXBzKS5hZGRUbyhtYXApO1xuXG4gICAgZnVuY3Rpb24gb25FYWNoRmVhdHVyZShmZWF0dXJlLCBsYXllcikge1xuICAgICAgICB2YXIgcG9wdXBDb250ZW50ID0gJyc7XG4gICAgICAgIGlmIChmZWF0dXJlLnByb3BlcnRpZXMgJiYgZmVhdHVyZS5wcm9wZXJ0aWVzLnBvcHVwQ29udGVudCkge1xuICAgICAgICAgICAgcG9wdXBDb250ZW50ICs9IGZlYXR1cmUucHJvcGVydGllcy5wb3B1cENvbnRlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBsYXllci5iaW5kUG9wdXAocG9wdXBDb250ZW50KTtcbiAgICB9XG5cblxuICAgIHZhciBtYXJrZXJzID0gTC5tYXJrZXJDbHVzdGVyR3JvdXAoKTsgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vTGVhZmxldC9MZWFmbGV0Lm1hcmtlcmNsdXN0ZXJcbiAgICB2YXIgb21zID0gbmV3IE92ZXJsYXBwaW5nTWFya2VyU3BpZGVyZmllcihtYXApO1xuXG4gICAgdmFyIHBvcHVwID0gbmV3IEwuUG9wdXAoKTtcblxuICAgIG9tcy5hZGRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihtYXJrZXIpe1xuICAgICAgICBwb3B1cC5zZXRDb250ZW50KG1hcmtlci5kZXNjKTtcbiAgICAgICAgcG9wdXAuc2V0TGF0TG5nKG1hcmtlci5nZXRMYXRMbmcoKSk7XG4gICAgICAgIG1hcC5vcGVuUG9wdXAocG9wdXApO1xuICAgIH0pO1xuXG4gICAgb21zLmFkZExpc3RlbmVyKCdzcGlkZXJmeScsIGZ1bmN0aW9uKG1hcmtlcnMpe1xuICAgICAgICAgICAgbWFwLmNsb3NlUG9wdXAoKTtcbiAgICB9KTtcblxuICAgIHZhciBnZW9Kc29uTGF5ZXIgPSBMLmdlb0pzb24oZXZlbnRzLCB7XG4gICAgICAgIG9uRWFjaEZlYXR1cmU6IG9uRWFjaEZlYXR1cmUsXG4gICAgICAgIHBvaW50VG9MYXllcjogZnVuY3Rpb24oZmVhdHVyZSwgbGF0bG5nKSB7XG4gICAgICAgICAgICByZXR1cm4gTC5tYXJrZXIobGF0bG5nKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgbWFya2Vycy5hZGRMYXllcihnZW9Kc29uTGF5ZXIpO1xuICAgIG1hcC5hZGRMYXllcihtYXJrZXJzKTtcbiAgICBtYXAuZml0Qm91bmRzKG1hcmtlcnMuZ2V0Qm91bmRzKCkpOyAvLyB0aGlzIG1heSBiZSB1c2VmdWxcbn0pKCk7XG5cblxuKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8vIEBzZWUgaHR0cHM6Ly93d3cuZHluYXRhYmxlLmNvbS8janNvbi1mcm9tLWFqYXhcbiAgICAkLmFqYXgoe1xuICAgICAgICB1cmw6ICcvZGF0YS9ldmVudHNfdGFibGUuanNvbicsXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICQoJyNldmVudF90YWJsZScpLmR5bmF0YWJsZSh7XG4gICAgICAgICAgICAgICAgZGF0YXNldDoge1xuICAgICAgICAgICAgICAgICAgICByZWNvcmRzOiBkYXRhLFxuICAgICAgICAgICAgICAgICAgICBzb3J0czogeyBkYXRlOiAxIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG59KSgpO1xuIl19
