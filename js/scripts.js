!function(){"use strict";var t=[" _____   _       _______","(____ \\ | |     (_______)"," _   \\ \\| |      _____","| |   | | |     |  ___)","| |__/ /| |_____| |","|_____/ |_______)_|"].join("\n");console.log(t)}(),function(){function t(t,e){var o="";t.properties&&t.properties.popupContent&&(o+=t.properties.popupContent),e.bindPopup(o)}var e=L.tileLayer("http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png",{attribution:'&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> &copy; <a href="http://cartodb.com/attributions">CartoDB</a>',subdomains:"abcd",maxZoom:19}),o=L.tileLayer("https://{s}.tile.thunderforest.com/landscape/{z}/{x}/{y}.png?apikey=ed8a8c98442949588501489e7f836831",{attribution:'&copy; <a href="http://www.thunderforest.com/">Thunderforest</a>, &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'}),a=L.map("map",{zoom:4,layers:[e,o]}),r={Landscape:o,Positron:e};L.control.layers(r).addTo(a);var n=L.markerClusterGroup(),_=new OverlappingMarkerSpiderfier(a),p=new L.Popup;_.addListener("click",function(t){p.setContent(t.desc),p.setLatLng(t.getLatLng()),a.openPopup(p)}),_.addListener("spiderfy",function(t){a.closePopup()});var s=L.geoJson(events,{onEachFeature:t,pointToLayer:function(t,e){return L.marker(e)}});n.addLayer(s),a.addLayer(n),a.fitBounds(n.getBounds())}(),function(){"use strict";$.ajax({url:"/data/events_table.json",success:function(t){$("#event_table").dynatable({dataset:{records:t,sorts:{date:1}}})}})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsiZGxmIiwiam9pbiIsImNvbnNvbGUiLCJsb2ciLCJvbkVhY2hGZWF0dXJlIiwiZmVhdHVyZSIsImxheWVyIiwicG9wdXBDb250ZW50IiwicHJvcGVydGllcyIsImJpbmRQb3B1cCIsIkNhcnRvREJfUG9zaXRyb24iLCJMIiwidGlsZUxheWVyIiwiYXR0cmlidXRpb24iLCJzdWJkb21haW5zIiwibWF4Wm9vbSIsIlRodW5kZXJmb3Jlc3RfTGFuZHNjYXBlIiwibWFwIiwiem9vbSIsImxheWVycyIsImJhc2VNYXBzIiwiTGFuZHNjYXBlIiwiUG9zaXRyb24iLCJjb250cm9sIiwiYWRkVG8iLCJtYXJrZXJzIiwibWFya2VyQ2x1c3Rlckdyb3VwIiwib21zIiwiT3ZlcmxhcHBpbmdNYXJrZXJTcGlkZXJmaWVyIiwicG9wdXAiLCJQb3B1cCIsImFkZExpc3RlbmVyIiwibWFya2VyIiwic2V0Q29udGVudCIsImRlc2MiLCJzZXRMYXRMbmciLCJnZXRMYXRMbmciLCJvcGVuUG9wdXAiLCJjbG9zZVBvcHVwIiwiZ2VvSnNvbkxheWVyIiwiZ2VvSnNvbiIsImV2ZW50cyIsInBvaW50VG9MYXllciIsImxhdGxuZyIsImFkZExheWVyIiwiZml0Qm91bmRzIiwiZ2V0Qm91bmRzIiwiJCIsImFqYXgiLCJ1cmwiLCJzdWNjZXNzIiwiZGF0YSIsImR5bmF0YWJsZSIsImRhdGFzZXQiLCJyZWNvcmRzIiwic29ydHMiLCJkYXRlIl0sIm1hcHBpbmdzIjoiQ0FFQSxXQUNFLFlBRUEsSUFBSUEsSUFDRiwyQkFDQSw2QkFDQSwyQkFDQSwwQkFDQSxzQkFDQSx1QkFDQUMsS0FBSyxLQUVQQyxTQUFRQyxJQUFJSCxNQUdkLFdBeUJJLFFBQVNJLEdBQWNDLEVBQVNDLEdBQzVCLEdBQUlDLEdBQWUsRUFDZkYsR0FBUUcsWUFBY0gsRUFBUUcsV0FBV0QsZUFDekNBLEdBQWdCRixFQUFRRyxXQUFXRCxjQUd2Q0QsRUFBTUcsVUFBVUYsR0E1QnBCLEdBQUlHLEdBQW1CQyxFQUFFQyxVQUFVLDhEQUMzQkMsWUFBYSx5SUFDYkMsV0FBWSxPQUNaQyxRQUFTLEtBRWJDLEVBQTBCTCxFQUFFQyxVQUFVLHdHQUNsQ0MsWUFBYSxnSkFHakJJLEVBQU1OLEVBQUVNLElBQUksT0FFWkMsS0FBTSxFQUNOQyxRQUFTVCxFQUFrQk0sS0FHM0JJLEdBQ0FDLFVBQWFMLEVBQ2JNLFNBQVlaLEVBR2hCQyxHQUFFWSxRQUFRSixPQUFPQyxHQUFVSSxNQUFNUCxFQVlqQyxJQUFJUSxHQUFVZCxFQUFFZSxxQkFDWkMsRUFBTSxHQUFJQyw2QkFBNEJYLEdBRXRDWSxFQUFRLEdBQUlsQixHQUFFbUIsS0FFbEJILEdBQUlJLFlBQVksUUFBUyxTQUFTQyxHQUM5QkgsRUFBTUksV0FBV0QsRUFBT0UsTUFDeEJMLEVBQU1NLFVBQVVILEVBQU9JLGFBQ3ZCbkIsRUFBSW9CLFVBQVVSLEtBR2xCRixFQUFJSSxZQUFZLFdBQVksU0FBU04sR0FDN0JSLEVBQUlxQixjQUdaLElBQUlDLEdBQWU1QixFQUFFNkIsUUFBUUMsUUFDekJyQyxjQUFlQSxFQUNmc0MsYUFBYyxTQUFTckMsRUFBU3NDLEdBQzVCLE1BQU9oQyxHQUFFcUIsT0FBT1csS0FJeEJsQixHQUFRbUIsU0FBU0wsR0FDakJ0QixFQUFJMkIsU0FBU25CLEdBQ2JSLEVBQUk0QixVQUFVcEIsRUFBUXFCLGdCQUkxQixXQUNJLFlBR0FDLEdBQUVDLE1BQ0VDLElBQUssMEJBQ0xDLFFBQVMsU0FBU0MsR0FDZEosRUFBRSxnQkFBZ0JLLFdBQ2RDLFNBQ0lDLFFBQVNILEVBQ1RJLE9BQVNDLEtBQU0iLCJmaWxlIjoic2NyaXB0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vPXJlcXVpcmUgLi4vbm9kZV9tb2R1bGVzL2xlYWZsZXQvZGlzdC9sZWFmbGV0LXNyYy5qc1xuXG4oZnVuY3Rpb24oKXtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBkbGYgPSBbXG4gICAgJyBfX19fXyAgIF8gICAgICAgX19fX19fXycsXG4gICAgJyhfX19fIFxcXFwgfCB8ICAgICAoX19fX19fXyknLFxuICAgICcgXyAgIFxcXFwgXFxcXHwgfCAgICAgIF9fX19fJyxcbiAgICAnfCB8ICAgfCB8IHwgICAgIHwgIF9fXyknLFxuICAgICd8IHxfXy8gL3wgfF9fX19ffCB8JyxcbiAgICAnfF9fX19fLyB8X19fX19fXylffCdcbiAgXS5qb2luKCdcXG4nKTtcblxuICBjb25zb2xlLmxvZyhkbGYpO1xufSkoKTtcblxuKGZ1bmN0aW9uKCkge1xuICAgIC8vICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBDYXJ0b0RCX1Bvc2l0cm9uID0gTC50aWxlTGF5ZXIoJ2h0dHA6Ly97c30uYmFzZW1hcHMuY2FydG9jZG4uY29tL2xpZ2h0X2FsbC97en0ve3h9L3t5fS5wbmcnLCB7XG4gICAgICAgICAgICBhdHRyaWJ1dGlvbjogJyZjb3B5OyA8YSBocmVmPVwiaHR0cDovL3d3dy5vcGVuc3RyZWV0bWFwLm9yZy9jb3B5cmlnaHRcIj5PcGVuU3RyZWV0TWFwPC9hPiAmY29weTsgPGEgaHJlZj1cImh0dHA6Ly9jYXJ0b2RiLmNvbS9hdHRyaWJ1dGlvbnNcIj5DYXJ0b0RCPC9hPicsXG4gICAgICAgICAgICBzdWJkb21haW5zOiAnYWJjZCcsXG4gICAgICAgICAgICBtYXhab29tOiAxOVxuICAgICAgICB9KSxcbiAgICAgICAgVGh1bmRlcmZvcmVzdF9MYW5kc2NhcGUgPSBMLnRpbGVMYXllcignaHR0cHM6Ly97c30udGlsZS50aHVuZGVyZm9yZXN0LmNvbS9sYW5kc2NhcGUve3p9L3t4fS97eX0ucG5nP2FwaWtleT1lZDhhOGM5ODQ0Mjk0OTU4ODUwMTQ4OWU3ZjgzNjgzMScsIHtcbiAgICAgICAgICAgIGF0dHJpYnV0aW9uOiAnJmNvcHk7IDxhIGhyZWY9XCJodHRwOi8vd3d3LnRodW5kZXJmb3Jlc3QuY29tL1wiPlRodW5kZXJmb3Jlc3Q8L2E+LCAmY29weTsgPGEgaHJlZj1cImh0dHA6Ly93d3cub3BlbnN0cmVldG1hcC5vcmcvY29weXJpZ2h0XCI+T3BlblN0cmVldE1hcDwvYT4nXG4gICAgICAgIH0pO1xuXG4gICAgdmFyIG1hcCA9IEwubWFwKCdtYXAnLCB7XG4gICAgICAgIC8vIGNlbnRlcjogWzM5LjczLCAtMTA0Ljk5XSxcbiAgICAgICAgem9vbTogNCxcbiAgICAgICAgbGF5ZXJzOiBbQ2FydG9EQl9Qb3NpdHJvbiwgVGh1bmRlcmZvcmVzdF9MYW5kc2NhcGVdXG4gICAgfSk7XG5cbiAgICB2YXIgYmFzZU1hcHMgPSB7XG4gICAgICAgIFwiTGFuZHNjYXBlXCI6IFRodW5kZXJmb3Jlc3RfTGFuZHNjYXBlLFxuICAgICAgICBcIlBvc2l0cm9uXCI6IENhcnRvREJfUG9zaXRyb25cbiAgICB9O1xuXG4gICAgTC5jb250cm9sLmxheWVycyhiYXNlTWFwcykuYWRkVG8obWFwKTtcblxuICAgIGZ1bmN0aW9uIG9uRWFjaEZlYXR1cmUoZmVhdHVyZSwgbGF5ZXIpIHtcbiAgICAgICAgdmFyIHBvcHVwQ29udGVudCA9ICcnO1xuICAgICAgICBpZiAoZmVhdHVyZS5wcm9wZXJ0aWVzICYmIGZlYXR1cmUucHJvcGVydGllcy5wb3B1cENvbnRlbnQpIHtcbiAgICAgICAgICAgIHBvcHVwQ29udGVudCArPSBmZWF0dXJlLnByb3BlcnRpZXMucG9wdXBDb250ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgbGF5ZXIuYmluZFBvcHVwKHBvcHVwQ29udGVudCk7XG4gICAgfVxuXG5cbiAgICB2YXIgbWFya2VycyA9IEwubWFya2VyQ2x1c3Rlckdyb3VwKCk7IC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL0xlYWZsZXQvTGVhZmxldC5tYXJrZXJjbHVzdGVyXG4gICAgdmFyIG9tcyA9IG5ldyBPdmVybGFwcGluZ01hcmtlclNwaWRlcmZpZXIobWFwKTtcblxuICAgIHZhciBwb3B1cCA9IG5ldyBMLlBvcHVwKCk7XG5cbiAgICBvbXMuYWRkTGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24obWFya2VyKXtcbiAgICAgICAgcG9wdXAuc2V0Q29udGVudChtYXJrZXIuZGVzYyk7XG4gICAgICAgIHBvcHVwLnNldExhdExuZyhtYXJrZXIuZ2V0TGF0TG5nKCkpO1xuICAgICAgICBtYXAub3BlblBvcHVwKHBvcHVwKTtcbiAgICB9KTtcblxuICAgIG9tcy5hZGRMaXN0ZW5lcignc3BpZGVyZnknLCBmdW5jdGlvbihtYXJrZXJzKXtcbiAgICAgICAgICAgIG1hcC5jbG9zZVBvcHVwKCk7XG4gICAgfSk7XG5cbiAgICB2YXIgZ2VvSnNvbkxheWVyID0gTC5nZW9Kc29uKGV2ZW50cywge1xuICAgICAgICBvbkVhY2hGZWF0dXJlOiBvbkVhY2hGZWF0dXJlLFxuICAgICAgICBwb2ludFRvTGF5ZXI6IGZ1bmN0aW9uKGZlYXR1cmUsIGxhdGxuZykge1xuICAgICAgICAgICAgcmV0dXJuIEwubWFya2VyKGxhdGxuZyk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIG1hcmtlcnMuYWRkTGF5ZXIoZ2VvSnNvbkxheWVyKTtcbiAgICBtYXAuYWRkTGF5ZXIobWFya2Vycyk7XG4gICAgbWFwLmZpdEJvdW5kcyhtYXJrZXJzLmdldEJvdW5kcygpKTsgLy8gdGhpcyBtYXkgYmUgdXNlZnVsXG59KSgpO1xuXG5cbihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvLyBAc2VlIGh0dHBzOi8vd3d3LmR5bmF0YWJsZS5jb20vI2pzb24tZnJvbS1hamF4XG4gICAgJC5hamF4KHtcbiAgICAgICAgdXJsOiAnL2RhdGEvZXZlbnRzX3RhYmxlLmpzb24nLFxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAkKCcjZXZlbnRfdGFibGUnKS5keW5hdGFibGUoe1xuICAgICAgICAgICAgICAgIGRhdGFzZXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgcmVjb3JkczogZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgc29ydHM6IHsgZGF0ZTogMSB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxufSkoKTtcbiJdfQ==
